[user]
	name = devartk
	email = devartk.dev@gmail.com

[core]
	excludesfile = ~/.global_gitingore
    # Ensure LF endings on commits
        # Other options :
            # false = don't perform any automatic line ending conversion, 
            # files checked out and commited with their original line endings whether they are LF or CRLF

            # true = on checkout converts LF to CRLF, on commit converts CRLF to LF; repo will contain LF endings, typically used on windows
            
            # input = checkout leaves LF as is, does not convert CRLF, commit converts CRLF to LF 
    autocrlf =  input

[color]
	# Enable colors in color-supporting terminals
	ui = true

[init]
	defaultBranch = master

[pull]
	# Use rebase instead of merge for cleaner history
	rebase = true

[rebase]
    # Enable auto squash during interactive rebasing;
        #  Commits marked with `fixup!` or `squash!` prefix
	autosquash = true
    # Enable stash during rebase; 
        # Automatically stash changes in working directory before rebase, reapply after
        # Good for preservering work but not having to commit it 
	autostash = true

# Reuse recorded conflict resolution on merge conflicts
    # To forget resolution run : `git rerere forget <pathspec>`
    # <pathspec> being path to file(s) in which to forget resolution
        # Has to be run within the merge context
    # To clear ALL resolutions; delete ~/.git/rr-cache 
[rerere]
    # Turns the rerere featre on; track & store resolutions
	enabled = true
    # Auto update rerere state (stored resolutions) when performing merge with conflicts
    # If encounter the same conflict in furture will automatically apply previous resolution
    # Even on a different branch
	autoupdate = true

# Git diff output configuration 
[diff]
    # Use more performant algo on larger files and complex changes, better accuracy at detecting changes
        # Such as when content was moved or reorganized within a file
	algorithm = histogram
    # Color moves
	colorMoved = default

[tag]
  # Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.
  sort = version:refname

[alias]
	# List aliases
	als = !git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'
	ci = commit
	sw = switch
	co = checkout
	st = status

    # Shows the changes between the working directory and the index (staging area). 
        # This means it displays changes that have been made to files but have not yet been staged (using git add)
	df = diff 

    # Shows the differences between the index (staging area) and the last commit. 
        # This means it displays changes that have been staged for the next commit but have not yet been committed. 
        # It shows what will be included in the next commit if you run git commit.
	dfs = diff --staged

	bb = "!f() { ~/better-branch.sh; }; f"
	# bb = !better-branch.sh

	# List local commits that were not pushed to remote repository
	review-local = "!git lg @{push}.."

	# Undo last commit but keep changed files in stage
	uncommit = reset --soft HEAD~1

    # Remove files from the staging area (index) without deleting them from the working directory
        # Remove files that have been added using `git add`
	untrack = "rm --cache --"

	# Stash all changes including untracked files
	staash = stash --all

# Large File Storage
# Used for replacing large files with text pointers, where the large files can then be stored on a remote server
# Ensures proper integration with Git 
[filter "lfs"]
    # Specify Git LFS is required for handling large files in repo, if not installed pushes be prevented until installed
	required = true
    # Command used to clean large files before staging, replace large files with pointer reference
	clean = git-lfs clean -- %f
    # Command used to restore large files from pointers when checking out files from repo; 
        # Large files will be replaced with their actual content
	smudge = git-lfs smudge -- %f
    # Command used to filter large files during Git LFS process; making sure it is invoked during cloning/pulling/pushing etc
	process = git-lfs filter-process


[gpg]
	# Configure Git to use SSH for signing commits and tags
		# Also run : git config --global user.signingkey /PATH/TO/.SSH/KEY.PUB
	format = ssh

[user]
	# /Should/ translate to %USERPROFILE%\.ssh in windows; Linux non-issue
		# Result of git config --global user.signingkey
	signingkey = ~/.ssh/id_ed25519.pub


# Personal Git Config
[includeIf "gitdir:~/workspace"] 
	# Create a specific personal directory and an additional .gitconfig within
	path = ~/workspace/.gitconfig

# Work Git Config
[includeIf "gitdir:C:/Users/4414327/workspace"] 
	# Create a specific workspace directory and an additional .gitconfig within
	path = C:/Users/4414327/workspace/.gitconfig
